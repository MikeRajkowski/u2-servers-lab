<!--

       Name    : SBSelectionControl.generic.xaml
       Author  : Kendrew Peacey
       
       ****************************************************************************
              
    Date            Who Issue #     Resource                        Description
    Sept 22, 2011   AKP SBXA-4588   SBSelectionControl (generic)    Moved base into main generic style.
              
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sbc="clr-namespace:SBXA.UI.WPFControls"
                    xmlns:sbe="clr-namespace:SBXA.UI.WPFControls.MarkupExtensions"
                    xmlns:sbs="http://schemas.sbxa.com/Shared" 
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    >
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/Converters.xaml" />
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/SBXceed/SBXceedSelectionGridTemplate.xaml" />
<!--        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/BaseSBFormStyle.xaml" />-->
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/BaseSBButtonStyle.xaml" />
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/BaseSBLabelStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <ObjectDataProvider ObjectType="{x:Type sbs:GuiInputEvent}" x:Key="SBGuiInputEvent"/>
    <!--(string.Empty, SBEvent.Menu, string.Empty, string.Empty, new SBString(IObjectH.EVENTVAL_SEARCH_FORWARD))-->

    <ObjectDataProvider ObjectInstance="{StaticResource SBGuiInputEvent}" MethodName="CreateSetEvent" x:Key="SBSearchEvent">
        <ObjectDataProvider.MethodParameters>
            <system:String>menu</system:String>
            <system:String>@36</system:String>
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>

    <ObjectDataProvider ObjectInstance="{StaticResource SBGuiInputEvent}" MethodName="CreateSetEvent" x:Key="SBBackwardSearchEvent">
        <ObjectDataProvider.MethodParameters>
            <system:String>menu</system:String>
            <system:String>@46</system:String>
        </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>

    <!-- Button template for MoreData icon -->
    <ControlTemplate x:Key="SBSelMoreDataButton" TargetType="{x:Type Button}">
        <Border x:Name="border" BorderBrush="#FF000000" BorderThickness="1,1,1,1">
            <Border.Background>
                <LinearGradientBrush EndPoint="0.529,1.125" StartPoint="0.529,0.125">
                    <GradientStop Color="#FFFFFFFF" Offset="0"/>
                    <GradientStop Color="#002C7FBF" Offset="1"/>
                </LinearGradientBrush>
            </Border.Background>
            <Image x:Name="PART_SBGraphic"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                       Margin="1"/>

        </Border>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsMoreData, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=sbc:SBSelectionControl}}" Value="True">
                <Setter TargetName="PART_SBGraphic" Property="Source" Value="{Binding Path=(sbc:SBGUIAttribute.SBGraphic), 
                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sbc:SBButton}}, 
                    Converter={StaticResource SBConverter}, 
                    Mode=OneWay}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsMoreData, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=sbc:SBSelectionControl}}" Value="False">
                <Setter TargetName="PART_SBGraphic" Property="Source" Value="{Binding Path=(sbc:SBGUIAttribute.SBDownGraphic), 
                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sbc:SBButton}}, 
                    Converter={StaticResource SBConverter}, 
                    Mode=OneWay}" />
                <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Button style for  More data icon -->
    <Style x:Key="SBSelMoreDataButtonStyle" TargetType="{x:Type Button}" >
        <Setter Property="Template" Value="{StaticResource SBSelMoreDataButton}" />
    </Style>

    <!-- Style for label that shows single or multiple selection style -->
    <Style x:Key="SBSelModeStyle" TargetType="{x:Type sbc:SBLabel}" BasedOn="{StaticResource BaseSBLabelStyle}">
        <Style.Triggers>
            <DataTrigger Binding= "{Binding Path=SelectionMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sbc:SBSelectionControl}}}"
                                                                Value="Single">
                <Setter Property="sbc:SBGUIAttribute.SBGraphic" Value="$SBOPATH\\APPSBMP\\Selsingl.bmp" />
            </DataTrigger>
            <DataTrigger Binding= "{Binding Path=SelectionMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sbc:SBSelectionControl}}}"
                                                                Value="Multiple">
                <Setter Property="sbc:SBGUIAttribute.SBGraphic" Value="$SBOPATH\\APPSBMP\\Selmulti.bmp" />
            </DataTrigger>
            <DataTrigger Binding= "{Binding Path=SelectionMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sbc:SBSelectionControl}}}"
                                                                Value="Extended">
                <Setter Property="sbc:SBGUIAttribute.SBGraphic" Value="$SBOPATH\\APPSBMP\\Selmulti.bmp" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="SBSelectionControlTemplate" TargetType="{x:Type sbc:SBSelectionControl}" >
        <ContentControl Template="{DynamicResource SBIntuitiveHelpFormTemplate}">

            <DockPanel LastChildFill="True" Focusable="False" >


                <UIElement.InputBindings>
                    <KeyBinding Command="sbc:SBCommands.SBAcceptSelectionCommand" Key="F2" />
                    <KeyBinding Command="sbc:SBCommands.SBTagSelectionCommand" CommandParameter="ALL"  Key="F3" />
                    <KeyBinding Command="sbc:SBCommands.SendResponseCommand" CommandParameter="{StaticResource SBSearchEvent}" Key="F6" />
                    <KeyBinding Command="sbc:SBCommands.SBRepeatSearchCommand" Key="F7" />
                    <KeyBinding Command="sbc:SBCommands.SendResponseCommand" CommandParameter="{StaticResource SBBackwardSearchEvent}" Key="F6" Modifiers="Shift"/>
                    <KeyBinding Command="sbc:SBCommands.SBTagRepeatSearchCommand" Key="F7" Modifiers="Shift"  />

                    <KeyBinding Command="sbc:SBCommands.SBTagSelectionCommand" Key="F5"/>
                    <KeyBinding Command="sbc:SBCommands.SBUnTagSelectionCommand" Key="F5" Modifiers="Shift"/>

                    <KeyBinding Command="sbc:SBCommands.SBTagSelectionCommand" CommandParameter="Loaded" Key="F9"/>
                    <KeyBinding Command="sbc:SBCommands.SBUnTagSelectionCommand" CommandParameter="All" Key="F9" Modifiers="Shift"/>

                    <KeyBinding Command="sbc:SBCommands.SBTagSelectionCommand" CommandParameter="All" Key="F8"/>
                    <KeyBinding Command="sbc:SBCommands.SBUnTagSelectionCommand" CommandParameter="All" Key="F8" Modifiers="Shift"/>
                    <KeyBinding Command="sbc:SBCommands.SBSelectDrillProcessCommand" Key="F4" />
                    <!-- Escape key handled in code, so grid can use same process -->
                </UIElement.InputBindings>

                <!-- Top Menu -->
                <Menu DockPanel.Dock="Top">
                    <MenuItem Header="{Binding Converter={StaticResource SBLanguageConverter}, ConverterParameter=FileMenuItem}">
                        <MenuItem Header="{Binding Converter={StaticResource SBLanguageConverter}, ConverterParameter=Accept}" InputGestureText="F2" Command="sbc:SBCommands.SBAcceptSelectionCommand"/>
                        <MenuItem Header="{Binding Converter={StaticResource SBLanguageConverter}, ConverterParameter=SelectAllMenuItem}" InputGestureText="F3"  Command="sbc:SBCommands.SBTagSelectionCommand"  CommandParameter="All"/>
                        <MenuItem Header="{Binding Converter={StaticResource SBLanguageConverter}, ConverterParameter=Exit}" Command="sbc:SBCommands.SBExitSelectionCommand"/>
                    </MenuItem>
                    <MenuItem Header="{Binding Converter={StaticResource SBLanguageConverter}, ConverterParameter=SearchMenuItem}">
                        <!--<MenuItem Header="{Binding Converter={StaticResource SBLanguageConverter}, ConverterParameter=ForwardMenuItem}" Command="sbc:SBCommands.SBForwardSearchCommand"/>-->
                        <MenuItem Header="{Binding Converter={StaticResource SBLanguageConverter}, ConverterParameter=ForwardMenuItem}" InputGestureText="F6" Command="sbc:SBCommands.SendResponseCommand">
                            <MenuItem.CommandParameter>
                                <Binding Source="{StaticResource SBSearchEvent}" />
                            </MenuItem.CommandParameter>
                            <!--CommandParameter="{StaticResource SBSearchEvent}"
                                        UpdateSourceTrigger="PropertyChanged" BindsDirectlyToSource="true" Mode="OneWayToSource"
                                        -->
                        </MenuItem>
                        <MenuItem Header="{Binding Converter={StaticResource SBLanguageConverter}, ConverterParameter=BackwardMenuItem}" InputGestureText="Shift+F6" Command="sbc:SBCommands.SendResponseCommand">
                            <MenuItem.CommandParameter>
                                <Binding Source="{StaticResource SBBackwardSearchEvent}" />
                            </MenuItem.CommandParameter>
                        </MenuItem>
                        <Separator/>
                        <MenuItem Header="{Binding Converter={StaticResource SBLanguageConverter}, ConverterParameter=RepeatMenuItem}" InputGestureText="F7" Command="sbc:SBCommands.SBRepeatSearchCommand"/>
                        <MenuItem Header="{Binding Converter={StaticResource SBLanguageConverter}, ConverterParameter=TagRepeatMenuItem}" InputGestureText="Shift+F7" Command="sbc:SBCommands.SBTagRepeatSearchCommand"/>
                    </MenuItem>
                    <MenuItem Header="{Binding Converter={StaticResource SBLanguageConverter}, ConverterParameter=TagMenuItem}" >
                        <MenuItem Header="{Binding Converter={StaticResource SBLanguageConverter}, ConverterParameter=TagMenuItem}"
                                              Command="sbc:SBCommands.SBTagSelectionCommand"
                                              InputGestureText="F5"
                                              />
                        <MenuItem Header="{Binding Converter={StaticResource SBLanguageConverter}, ConverterParameter=UnTagMenuItem}" Command="sbc:SBCommands.SBUnTagSelectionCommand" InputGestureText="Shift+F5"/>

                        <MenuItem Header="{Binding Converter={StaticResource SBLanguageConverter}, ConverterParameter=TagAllMenuItem}" Command="sbc:SBCommands.SBTagSelectionCommand" CommandParameter="Loaded"  InputGestureText="F9"/>
                        <MenuItem Header="{Binding Converter={StaticResource SBLanguageConverter}, ConverterParameter=UnTagAllMenuItem}" Command="sbc:SBCommands.SBUnTagSelectionCommand" CommandParameter="All"  InputGestureText="Shift+F9"/>

                        <Separator/>

                        <MenuItem Header="{Binding Converter={StaticResource SBLanguageConverter}, ConverterParameter=TagGlobalMenuItem}" Command="sbc:SBCommands.SBTagSelectionCommand" CommandParameter="All"  InputGestureText="F8"/>
                        <MenuItem Header="{Binding Converter={StaticResource SBLanguageConverter}, ConverterParameter=UnTagGlobalMenuItem}" Command="sbc:SBCommands.SBUnTagSelectionCommand" CommandParameter="All"  InputGestureText="Shift+F8"/>
                    </MenuItem>
                    <MenuItem Header="{Binding Converter={StaticResource SBLanguageConverter}, ConverterParameter=HelpMenuItem}" />
                </Menu>

                <!-- Buttons displayed in another grid -->
                <Grid DockPanel.Dock="Bottom"  Margin="0,5,0,5">

                    <!-- Layout transform added to scale the buttons to match the selection list-->
                    <Grid.LayoutTransform>
                        <ScaleTransform x:Name="PART_SBFormScaleTransform" 
                                                CenterX="0"
                                                CenterY="0"
                                                ScaleX="{Binding Path=(sbc:SBUISupport.ZoomValue), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sbc:SBForm} }}"
                                                ScaleY="{Binding Path=(sbc:SBUISupport.ZoomValue), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sbc:SBForm} }}"
                                                />
                    </Grid.LayoutTransform>

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <!-- Dummy column so icons are on right -->
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <!-- Create get SBStyle extension, that will take the name of the control, change check to see if there is a style for it. -->
                    <sbc:SBButton sbe:SBDynamicResourceExtension.DefaultControlStyleIndexKey="SelectionButtonStyle"
                                                  Style="{sbe:SBDynamicResource ControlStyleIndexKey=SelectionButtonStyle, DefaultResourceKey=SBSelectionControlButtonStyle}"
                                                  sbc:SBGUIAttribute.SBString="Accept"
                                                  Command="sbc:SBCommands.SBAcceptSelectionCommand"
                                                  sbc:SBButton.ShouldSendSBCommands="false"
                                                  Grid.Row="0" Grid.Column="0"
                                                  />

                    <sbc:SBButton sbe:SBDynamicResourceExtension.DefaultControlStyleIndexKey="SelectionButtonStyle"
                                                  Style="{sbe:SBDynamicResource ControlStyleIndexKey=SelectionButtonStyle, DefaultResourceKey=SBSelectionControlButtonStyle}"
                                                  sbc:SBGUIAttribute.SBString="{Binding Path=DrillProcessButtonName, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"                                                
                                                  sbc:SBButton.ShouldSendSBCommands="false"
                                                  Command="sbc:SBCommands.SBSelectDrillProcessCommand"
                                                  Visibility="{Binding Path=DrillProcessVisibility, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                                  Grid.Row="0" Grid.Column="1"
                                                  />

                    <sbc:SBButton sbe:SBDynamicResourceExtension.DefaultControlStyleIndexKey="SelectionButtonStyle"
                                                  Style="{sbe:SBDynamicResource ControlStyleIndexKey=SelectionButtonStyle, DefaultResourceKey=SBSelectionControlButtonStyle}"
                                                  sbc:SBGUIAttribute.SBString="Cancel"
                                                  Command="sbc:SBCommands.SBExitSelectionCommand"
                                                  sbc:SBButton.ShouldSendSBCommands="false"
                                                  Grid.Row="0" Grid.Column="2" />
                    <sbc:SBButton sbe:SBDynamicResourceExtension.DefaultControlStyleIndexKey="SelectionButtonStyle"
                                                  Style="{sbe:SBDynamicResource ControlStyleIndexKey=SelectionButtonStyle, DefaultResourceKey=SBSelectionControlButtonStyle}"
                                                  sbc:SBGUIAttribute.SBString="Stop"
                                                  Command="sbc:SBCommands.SBAbortDataLoadCommand"
                                                  sbc:SBButton.ShouldSendSBCommands="false"
                                                  Grid.Row="0" Grid.Column="3" />

                    <sbc:SBButton Style="{StaticResource BaseSBButtonStyle}"
                                        sbc:SBGUIAttribute.SBGraphic="$SBOPATH\\APPSBMP\\Selmore.bmp"
                                        sbc:SBGUIAttribute.SBDownGraphic="$SBOPATH\\APPSBMP\\Selnone.bmp"
                                        sbc:SBControlStyle="{StaticResource SBSelMoreDataButtonStyle}"                                        
                                        Command="sbc:SBCommands.SBSendAllDataCommand"
                                                  sbc:SBButton.ShouldSendSBCommands="false"
                                                  Width="18"
                                                  Height="18"
                                                  Grid.Row="0" Grid.Column="5" />
                    <sbc:SBLabel Style="{StaticResource SBSelModeStyle}"
                                             Margin="2,0"
                                             Width="18"
                                             Height="18"
                                             Grid.Row="0" Grid.Column="6" />
                    <sbc:SBLabel x:Name="SelUpload"
                                             sbc:SBGUIAttribute.SBGraphic="$SBOPATH\\APPSBMP\\Selupld.bmp"
                                             Margin="2,0"
                                             Width="18"
                                             Height="18"
                                             Grid.Row="0" Grid.Column="6" />
                </Grid>

                <DockPanel LastChildFill="True" Focusable="False">
                    <!-- Actual select list displayed in a DataPresenter -->
                    <Grid x:Name="PART_SBZoomGrid">
                        <Grid.LayoutTransform>
                            <ScaleTransform x:Name="PART_SBFormScaleTransform" 
                                                CenterX="0"
                                                CenterY="0"
                                                ScaleX="{Binding Path=(sbc:SBUISupport.ZoomValue), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sbc:SBForm} }}"
                                                ScaleY="{Binding Path=(sbc:SBUISupport.ZoomValue), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sbc:SBForm} }}"
                                                />
                        </Grid.LayoutTransform>

                        <ContentControl x:Name="PART_SBSelectionGrid" 
                                            Focusable="false" 
                                            Template="{StaticResource SBXceedSelectionGridTemplate}" 
                                    >
                            <ContentControl.Style>
                                <Style>
                                    <Setter Property="ContentControl.Width" Value="{Binding Path=(sbc:SBForm.FormWidth), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sbc:SBSelectionControl}}, Mode=OneWay}" />
                                    <Setter Property="ContentControl.Height" Value="{Binding Path=(sbc:SBForm.FormHeight), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sbc:SBSelectionControl}}, Mode=OneWay}" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=SizeToContent,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sbc:SBWindow}}}"
                                                             Value="Manual">
                                            <Setter Property="ContentControl.Width" Value="NaN" />
                                            <Setter Property="ContentControl.Height" Value="NaN" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ContentControl.Style>
                            <!--
                                            Width="{Binding Path=(sbc:SBForm.FormWidth), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sbc:SBSelectionControl}}, Mode=OneWay}"
                                            Height="{Binding Path=(sbc:SBForm.FormHeight), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sbc:SBSelectionControl}}, Mode=OneWay}"
                                    Height="{Binding Path=ActualHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DockPanel}}, Mode=OneWay}"
                                    -->
                        </ContentControl>
                    </Grid>
                </DockPanel>
            </DockPanel>

        </ContentControl>

        <ControlTemplate.Triggers>
            <Trigger Property="FetchingAll" Value="false">
                <Setter Property="Visibility" TargetName="SelUpload" Value="Collapsed"/>
            </Trigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>


    <Style TargetType="{x:Type sbc:SBSelectionControl}" >
        <Setter Property="sbc:SBUISupport.StyleName" Value="BaseSBSelectionControlStyle" />
        <Setter Property="GridProvider" Value="{Binding Path=SBPlus.SBUserPreferences.GridProvider, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}"/>
        <Setter Property="sbc:SBGUIAttribute.SBTitle" Value="{Binding Path=GuiObjectDefinition.Title, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}"/>
        <Setter Property="SBColumnDefinitions" Value="{Binding Path=GuiObjectDefinition.ColumnDefinitions, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}"/>
        <Setter Property="ColumnWidths" Value="{Binding Path=GuiObjectDefinition.Width, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}"/>
        <Setter Property="SelectionMode" Value="{Binding Path=GuiObjectDefinition.MultiSelect, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay, Converter={StaticResource SBSelectionModeConverter}}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="sbc:SBForm.IsMaximizable" Value="False" />
        <Setter Property="sbc:SBForm.IsMinimizable" Value="False" />
        <Setter Property="IsCachable" Value="False" />
        <Setter Property="sbc:SBForm.FormBorderWidth" Value="{x:Static sbs:GenericConstants.DEFAULT_FORM_BORDER_WIDTH}" />
        <Setter Property="MinWidth" Value="{x:Static sbs:GenericConstants.DEFAULT_SEL_FORM_MIN_WIDTH}" />
        <Setter Property="Template" Value="{StaticResource SBSelectionControlTemplate}" />
        <Setter Property="Opacity" Value="0" />
        
         <Setter Property="sbc:SBForm.FormBorderColor">
            <Setter.Value>
                <PriorityBinding >
                    <PriorityBinding.FallbackValue>
                        <LinearGradientBrush EndPoint="0.738,0.989" StartPoint="0.279,0.018">
                            <GradientStop Color="#FF3B9DD1" Offset="1"/>
                            <GradientStop Color="#FF73C5F0" Offset="0"/>
                        </LinearGradientBrush>
                    </PriorityBinding.FallbackValue>
                    <Binding Path="(sbc:SBGUIAttribute.SBBorderColor)"
                             Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}"
                             Converter="{StaticResource SBColorConverter}"
                             />
                    <Binding Path="GuiObjectDefinition.SBBorderColor" 
                             Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}"
                             Converter="{StaticResource SBColorConverter}"/>
                </PriorityBinding>
            </Setter.Value>
        </Setter>

        <!-- <Setter Property="sbc:SBForm.FormHeight" Value="{Binding Path=GuiObjectDefinition.Height, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" /> -->
        <!--        <Setter Property="sbc:SBForm.FormWidth" Value="{Binding Path=GuiObjectDefinition.Width, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />-->
        <!-- Make sure the width of the form is wide enough to contain the entire grid. -->
        <Setter Property="sbc:SBForm.FormWidth">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource SBGridWidthCalculatorConverter}">
                    <Binding Path="(sbc:SBGridControl.VerticalScrollBarWidth)" RelativeSource="{RelativeSource Mode=Self}" Mode="OneWay" />
                    <Binding Path="(sbc:SBGridControl.ExtentWidth)" RelativeSource="{RelativeSource Mode=Self}" Mode="OneWay" />
                    <Binding Path="(sbc:SBGridControl.RowSelectorWidth)" RelativeSource="{RelativeSource Mode=Self}" Mode="OneWay" />
                    <Binding Path="DependencyProperty.UnsetValue" FallbackValue="2"/>
                </MultiBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="sbc:SBUISupport.ZoomValue" Value="{Binding Path=(sbc:SBUISupport.ZoomValue), Source={x:Static sbc:SBPlus.Current}}" />

        <Setter Property="Background" Value="Transparent" />
        <Setter Property="sbc:SBGUIAttribute.SBStyleName" Value="{Binding Path=GuiObjectDefinition.StyleName, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
        <Setter Property="sbc:SBControl.SBControlBackground" Value="{DynamicResource SBControlBackground}" />
        <Setter Property="CanHostStatusBar" Value="False" />

        <Setter Property="sbc:SBGUIAttribute.SBAttributeMap">
            <Setter.Value>
                <sbc:SBAttributeMap>
                    <sbc:SBAttribute Name="style_name"
                                     GetProperty="(sbc:SBGUIAttribute.SBStyleName)"
                                     SetProperty="(sbc:SBGUIAttribute.SBStyleName)" />
                    <sbc:SBAttribute Name="drawable"
                                     GetProperty="(sbc:SBGUIAttribute.SBDrawable)"
                                     SetProperty="(sbc:SBGUIAttribute.SBDrawable)" />
                    <sbc:SBAttribute Name="title"
                                     GetProperty="(sbc:SBGUIAttribute.SBTitle)"
                                     SetProperty="(sbc:SBGUIAttribute.SBTitle)" />
                    <sbc:SBAttribute Name="background"
                                     GetProperty="(sbc:SBForm.FormBackground)" GetConverter="{StaticResource SBColorConverter}"
                                     SetProperty="(sbc:SBGUIAttribute.SBBackground)"/>
                    <sbc:SBAttribute Name="foreground" 
                                     GetProperty="Control.Foreground" GetConverter="{StaticResource SBColorConverter}"
                                     SetProperty="(sbc:SBGUIAttribute.SBForeground)"/>
                    <!-- TODO coordinated aren't working yet -->
                    <sbc:SBAttribute Name="coordinates"
                                     GetProperty="(sbc:SBGUIAttribute.SBCoordinates)"
                                     SetProperty="(sbc:SBGUIAttribute.SBCoordinates)"/>
                    <sbc:SBAttribute Name="object_name"
                                     GetProperty="(sbc:SBGUIAttribute.SBObjectName)"
                                     SetProperty="(sbc:SBGUIAttribute.SBObjectName)" />
                    <sbc:SBAttribute2 Name="dimensions"
                                     GetProperty="Control.ActualWidth"
                                     GetProperty2="Control.ActualHeight"
                                     GetConverter2="{StaticResource SBDimensionsMultiConverter}"
                                     SetProperty="(sbc:SBGUIAttribute.SBDimensions)"/>
                    <sbc:SBAttribute Name="tile"
                                     GetProperty="(sbc:SBGUIAttribute.SBTile)"
                                     SetProperty="(sbc:SBGUIAttribute.SBTile)" />

                    <!-- Following attributes are mapped to a SBGUI attribute so they can be used, -->
                    <!-- but they are not currently used in our styles -->
                    <sbc:SBAttribute Name="border_color"
                                     GetProperty="(sbc:SBGUIAttribute.SBBorderColor)"
                                     SetProperty="(sbc:SBGUIAttribute.SBBorderColor)" />
                    <sbc:SBAttribute Name="border_style"
                                     GetProperty="(sbc:SBGUIAttribute.SBBorderStyle)"
                                     SetProperty="(sbc:SBGUIAttribute.SBBorderStyle)" />
                    <sbc:SBAttribute Name="border_width"
                                     GetProperty="(sbc:SBGUIAttribute.SBBorderWidth)"
                                     SetProperty="(sbc:SBGUIAttribute.SBBorderWidth)" />

                </sbc:SBAttributeMap>
            </Setter.Value>
        </Setter>

        <Setter Property="sbc:SBForm.FormBackground">
            <Setter.Value>
                <PriorityBinding FallbackValue="{x:Static SystemColors.WindowBrush}">
                    <Binding Path="(sbc:SBGUIAttribute.SBTile)" Mode="OneWay" Converter="{StaticResource SBTileConverter}" RelativeSource="{RelativeSource Mode=Self}" />
                    <Binding Path="(sbc:SBGUIAttribute.SBBackground)" Mode="OneWay" Converter="{StaticResource SBColorConverter}" RelativeSource="{RelativeSource Mode=Self}"/>
                    <Binding Path="GuiObjectDefinition.Background" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBColorConverter}"/>
                    <Binding Path="(sbc:SBControl.SBControlBackground)" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}"/>
                </PriorityBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="sbc:SBForm.FormBorderColor">
            <Setter.Value>
                <PriorityBinding >
                    <PriorityBinding.FallbackValue>
                        <LinearGradientBrush EndPoint="0.738,0.989" StartPoint="0.279,0.018">
                            <GradientStop Color="#FF3B9DD1" Offset="1"/>
                            <GradientStop Color="#FF73C5F0" Offset="0"/>
                        </LinearGradientBrush>
                    </PriorityBinding.FallbackValue>
                    <Binding Path="(sbc:SBGUIAttribute.SBBorderColor)"
                             Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}"
                             Converter="{StaticResource SBColorConverter}"
                             />
                    <Binding Path="GuiObjectDefinition.SBBorderColor" 
                             Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}"
                             Converter="{StaticResource SBColorConverter}"/>
                </PriorityBinding>
            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <DataTrigger Binding="{Binding Path=GuiObjectDefinition.BorderWidth, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource SBIsNullOrEmptyConverter}}" Value="False">
                <Setter Property="sbc:SBForm.FormBorderWidth" Value="{Binding Path=GuiObjectDefinition.BorderWidth, RelativeSource={RelativeSource Mode=Self}}" />
            </DataTrigger>

            <!-- This trigger will check to see if the server is busy and if we should show the hour glass, if both are true then the cursor is change to the Wait cursor. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ApplicationDefinition.IsHourGlassEnabled, Source={x:Static sbc:SBPlus.Current}}" Value="true" />
                    <Condition Binding="{Binding Path=InputState, Source={x:Static sbc:SBPlus.Current}}" Value="Dormant" />
                </MultiDataTrigger.Conditions>
                <Setter Property="FrameworkElement.Cursor" Value="Wait" />
            </MultiDataTrigger>
            <!-- This trigger will check to see if the client is busy and if we should show the hour glass, if both are true then the cursor is change to the Wait cursor. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ApplicationDefinition.IsHourGlassEnabled, Source={x:Static sbc:SBPlus.Current}}" Value="true" />
                    <Condition Binding="{Binding Path=InputState, Source={x:Static sbc:SBPlus.Current}}" Value="Busy" />
                </MultiDataTrigger.Conditions>
                <Setter Property="FrameworkElement.Cursor" Value="Wait" />
            </MultiDataTrigger>

        </Style.Triggers>
    </Style>


</ResourceDictionary>