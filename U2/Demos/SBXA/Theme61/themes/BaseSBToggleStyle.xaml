<!--

       Name    : BaseSBToggleStyle.xaml
       Author  : Kendrew Peacey
       
       ****************************************************************************
           Maintenence log - insert most recent change descriptions at top

    
    Date            Who Tracking #  Style                           Description
    June 15, 2011   AKP SBXA-3625   BaseSBToggleStyle               Added attribtue support for editable.
              
-->
<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sbc="clr-namespace:SBXA.UI.WPFControls" 
    xmlns:sbce="clr-namespace:SBXA.UI.WPFControls.MarkupExtensions"
    >

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/Converters.xaml" />
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/SbControl.xaml" />
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/BaseSBControlStyle.xaml" />
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/NoFocusContextMenu.xaml" />
    </ResourceDictionary.MergedDictionaries>


    <Style x:Key="BaseSBToggleStyle" BasedOn="{StaticResource BaseSBControlStyle}" TargetType="{x:Type sbc:SBToggle}">
        <Setter Property="sbc:SBControl.SBControlStyle" Value="{DynamicResource SBToggleStyle}" />
        <Setter Property="sbc:SBControl.SBFocusControlStyle" Value="{Binding Path=SBControlStyle, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
        <Setter Property="sbc:SBControl.IsEnabled" Value="{Binding Path=(sbc:SBGUIAttribute.SBEmphasized), RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource SBConverter}, Mode=TwoWay}" />
        <Setter Property="Label" Value="{Binding Path=GuiObjectDefinition.ToggleDefinition.Label, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay }" />

        <Setter Property="Margin" Value="{Binding Path=GuiObjectDefinition.Margin, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay, Converter={StaticResource SBConverter}}" />
        <Setter Property="Control.VerticalAlignment" Value="Top"/>
        <Setter Property="Control.HorizontalAlignment" Value="Left"/>

        <Setter Property="sbc:SBGUIAttribute.SBAttributeMap">
            <Setter.Value>
                <sbc:SBAttributeMap>
                    <sbc:SBAttribute Name="style_name"
                                     GetProperty="(sbc:SBGUIAttribute.SBStyleName)"
                                     SetProperty="(sbc:SBGUIAttribute.SBStyleName)" />
                    <sbc:SBAttribute Name="drawable"
                                     GetProperty="(sbc:SBGUIAttribute.SBDrawable)"
                                     SetProperty="(sbc:SBGUIAttribute.SBDrawable)" />
                    <sbc:SBAttribute5 x:Name="font"
                                     GetProperty="Control.FontFamily"
                                     GetProperty2="Control.FontSize"
                                     GetProperty3="Control.FontWeight"
                                     GetProperty4="Control.FontStyle"
                                     GetProperty5="(sbc:SBControl.TextDecorations)"
                                     GetConverter5="{StaticResource SBFontToIDConverter}"
                                     SetProperty="(sbc:SBGUIAttribute.SBFont)" />
                    <sbc:SBAttribute Name="background"
                                     GetProperty="Control.Background" GetConverter="{StaticResource SBColorConverter}"
                                     SetProperty="(sbc:SBGUIAttribute.SBBackground)"/>
                    <sbc:SBAttribute Name="foreground" 
                                     GetProperty="Control.Foreground" GetConverter="{StaticResource SBColorConverter}"
                                     SetProperty="(sbc:SBGUIAttribute.SBForeground)"/>
                    <sbc:SBAttribute Name="coordinates"
                                     GetProperty="Control.Margin"
                                     GetConverter="{StaticResource SBCoordinatesToMarginConverter}"
                                     SetProperty="(sbc:SBGUIAttribute.SBCoordinates)"/>

                    <sbc:SBAttribute Name="emphasized"
                                     GetProperty="(sbc:SBGUIAttribute.SBEmphasized)"
                                     SetProperty="(sbc:SBGUIAttribute.SBEmphasized)" />
                    <sbc:SBAttribute Name="object_name"
                                     GetProperty="(sbc:SBGUIAttribute.SBObjectName)"
                                     SetProperty="(sbc:SBGUIAttribute.SBObjectName)" />
                    <sbc:SBAttribute2 Name="dimensions"
                                     GetProperty="Control.Width"
                                     GetProperty2="Control.Height"
                                     GetConverter2="{StaticResource SBDimensionsMultiConverter}"
                                     SetProperty="(sbc:SBGUIAttribute.SBDimensions)"/>
                    <sbc:SBAttribute2 x:Name="justification"
                                     GetProperty="Control.HorizontalContentAlignment"
                                     GetProperty2="Control.VerticalContentAlignment"
                                     GetConverter2="{StaticResource SBTextAlignmentMultiConverter}"
                                     SetProperty="(sbc:SBGUIAttribute.SBJustification)"/>
                    <sbc:SBAttribute Name="false_fill"
                                     GetProperty="(sbc:SBGUIAttribute.SBFalseFill)"
                                     SetProperty="(sbc:SBGUIAttribute.SBFalseFill)" />
                    <!-- As above, but they are not currently used in out styles -->
                    <sbc:SBAttribute Name="border_color"
                                     GetProperty="(sbc:SBGUIAttribute.SBBorderColor)"
                                     SetProperty="(sbc:SBGUIAttribute.SBBorderColor)" />
                    <sbc:SBAttribute Name="border_style"
                                     GetProperty="(sbc:SBGUIAttribute.SBBorderStyle)"
                                     SetProperty="(sbc:SBGUIAttribute.SBBorderStyle)" />
                    <sbc:SBAttribute Name="border_width"
                                     GetProperty="(sbc:SBGUIAttribute.SBBorderWidth)"
                                     SetProperty="(sbc:SBGUIAttribute.SBBorderWidth)" />

                    <sbc:SBAttribute Name="string"
                                     GetProperty="(sbc:SBGUIAttribute.SBString)"
                                     SetProperty="(sbc:SBGUIAttribute.SBString)"/>
                    
                    <!-- Added for SBXA-3625 (kp June 15, 2011) -->
                    <sbc:SBAttribute Name ="editable"                                     
                                     GetProperty="(sbc:SBGUIAttribute.SBEditable)" 
                                     SetProperty="(sbc:SBGUIAttribute.SBEditable)"/>

                    <!-- Obsolete properties -->
                    <sbc:SBAttribute Name="input_flag" Supported="Obsolete" />

                </sbc:SBAttributeMap>
            </Setter.Value>
        </Setter>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type sbc:SBToggle}">
                    
                    <CheckBox x:Name="PART_FocusSite"
                              Style="{Binding Path=SBControlStyle, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                              IsChecked="{sbce:SBToggleValue Source={RelativeSource TemplatedParent}, Path=SBValue}"
                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              IsEnabled="{Binding Path=IsEditable, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sbc:SBToggle}}}" 
                        />
<!-- Added IsEnabled binding. (SBXA-3877, kp 1/27/11) 
                    
                    -->
                    <ControlTemplate.Triggers>
                        <!-- Only display the tool tip if there is one. -->
                        <DataTrigger Binding="{Binding Path=GuiObjectDefinition.HelpString, 
                             RelativeSource={RelativeSource Mode=Self}, Mode=OneWay, Converter={StaticResource SBIsNullOrEmptyConverter}}" Value="false">
                            <Setter TargetName="PART_FocusSite"  Property="ToolTip" Value="{Binding Path=GuiObjectDefinition.HelpString, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="sbc:SBControl.HasSBFocus" Value="True" >
                <Setter Property="ContextMenu" Value="{Binding Path=GuiObjectDefinition.ContextMenuDefinition,
                                                   RelativeSource={RelativeSource Mode=Self}, Mode=OneWay,
                                                   Converter={StaticResource SBContextMenuConverter},
                                                   ConverterParameter=Field}" />
            </Trigger>

            <Trigger Property="sbc:SBControl.HasSBFocus" Value="False" >
                <Setter Property="ContextMenu" Value="{StaticResource NoFocusContextMenu}" />
            </Trigger>
        </Style.Triggers>

    </Style>

</ResourceDictionary>