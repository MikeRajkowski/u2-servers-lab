<!--

       Name    : BaseSBControlStyle.xaml
       Author  : Kendrew Peacey
       
       ****************************************************************************
           Maintenence log - insert most recent change descriptions at top
              Module  %M%     Version %I%     Date    %H%
              
-->
<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sbc="clr-namespace:SBXA.UI.WPFControls"
    xmlns:sbp="http://schemas.sbxa.com/WPFControls"
    >

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/Converters.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- TargetType="{x:Type sbc:SBControl}" -->
    <!-- BaseSBControlStyle -->
    <Style x:Key="BaseSBControlStyle" >
        <Setter Property="sbc:SBGUIAttribute.SBGraphic" Value="{Binding Path=GuiObjectDefinition.Graphic, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
        <Setter Property="sbc:SBGUIAttribute.SBDownGraphic" Value="{Binding Path=GuiObjectDefinition.DownGraphic, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
        <!-- Moved this property into a trigger lower down, eCase 41516*USA <Setter Property="sbc:SBGUIAttribute.SBStyleName" Value="{Binding Path=GuiObjectDefinition.StyleName, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />-->
        <Setter Property="sbc:SBGUIAttribute.SBDrawable" Value="1" />
        <Setter Property="sbc:SBControl.Focusable" Value="False" />
        <Setter Property="sbc:SBControl.FieldName" Value="{Binding Path=GuiObjectDefinition.FieldDefinition.FieldName, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
        <Setter Property="sbc:SBControl.IsEnabled" Value="{Binding Path=(sbc:SBGUIAttribute.SBEmphasized), RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource SBConverter}, Mode=TwoWay}" />
        <Setter Property="Control.HorizontalContentAlignment" Value="{Binding Path=GuiObjectDefinition.Justification, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource SBTextAlignmentConverter}}" />
        <Setter Property="Control.VerticalContentAlignment" Value="{Binding Path=GuiObjectDefinition.Justification, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource SBTextAlignmentConverter}}" />
        <Setter Property="sbc:SBGUIAttribute.SBString" Value="{Binding Path=SBValue, RelativeSource={RelativeSource Mode=Self}, Mode=TwoWay}"/>
        <Setter Property="sbc:SBGUIAttribute.SBHelpString" Value="{Binding Path=GuiObjectDefinition.HelpString, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource SBConverter}, Mode=OneWay}" />
        <Setter Property="sbc:SBControl.SBControlBackground" Value="{DynamicResource SBControlBackground}" />

        <!-- Mapping from server attribute names to XUI properties -->
        <Setter Property="sbc:SBGUIAttribute.SBAttributeMap">
            <Setter.Value>
                <sbc:SBAttributeMap>
                    <sbc:SBAttribute Name="style_name"
                                     GetProperty="(sbc:SBGUIAttribute.SBStyleName)"
                                     SetProperty="(sbc:SBGUIAttribute.SBStyleName)" />
                    <sbc:SBAttribute5 Name="font"
                                     GetProperty="Control.FontFamily"
                                     GetProperty2="Control.FontSize"
                                     GetProperty3="Control.FontWeight"
                                     GetProperty4="Control.FontStyle"
                                     GetProperty5="(sbc:SBControl.TextDecorations)"
                                     GetConverter5="{StaticResource SBFontToIDConverter}"
                                     SetProperty="(sbc:SBGUIAttribute.SBFont)" />
                    <sbc:SBAttribute Name="drawable"
                                     GetProperty="(sbc:SBGUIAttribute.SBDrawable)"
                                     SetProperty="(sbc:SBGUIAttribute.SBDrawable)" />
                    <sbc:SBAttribute Name="background"
                                     GetProperty="Control.Background" GetConverter="{StaticResource SBColorConverter}"
                                     SetProperty="(sbc:SBGUIAttribute.SBBackground)"/>
                    <sbc:SBAttribute Name="foreground" 
                                     GetProperty="Control.Foreground" GetConverter="{StaticResource SBColorConverter}"
                                     SetProperty="(sbc:SBGUIAttribute.SBForeground)"/>
                    <sbc:SBAttribute Name="coordinates"
                                     GetProperty="Control.Margin"
                                     GetConverter="{StaticResource SBCoordinatesToMarginConverter}"
                                     SetProperty="(sbc:SBGUIAttribute.SBCoordinates)"/>
                    <sbc:SBAttribute Name="object_name"
                                     GetProperty="(sbc:SBGUIAttribute.SBObjectName)"
                                     SetProperty="(sbc:SBGUIAttribute.SBObjectName)" />
                    <sbc:SBAttribute2 Name="dimensions"
                                     GetProperty="Control.ActualWidth"
                                     GetProperty2="Control.ActualHeight"
                                     GetConverter2="{StaticResource SBDimensionsMultiConverter}"
                                     SetProperty="(sbc:SBGUIAttribute.SBDimensions)"/>
                    <sbc:SBAttribute2 Name="justification"
                                     GetProperty="Control.HorizontalContentAlignment"
                                     GetProperty2="Control.VerticalContentAlignment"
                                     GetConverter2="{StaticResource SBTextAlignmentMultiConverter}"
                                     SetProperty="(sbc:SBGUIAttribute.SBJustification)"/>
                    <sbc:SBAttribute Name="emphasized"
                                     GetProperty="(sbc:SBGUIAttribute.SBEmphasized)"
                                     SetProperty="(sbc:SBGUIAttribute.SBEmphasized)" />
                    <!-- Following attributes are mapped to a SBGUI attribute so they can be used,
                         but aren't yet updated from any controls properties when fetched -->
                    <sbc:SBAttribute Name ="graphic"
                                     GetProperty="(sbc:SBGUIAttribute.SBGraphic)"
                                     SetProperty="(sbc:SBGUIAttribute.SBGraphic)" />
                    <sbc:SBAttribute Name ="down_graphic"
                                     GetProperty="(sbc:SBGUIAttribute.SBDownGraphic)"
                                     SetProperty="(sbc:SBGUIAttribute.SBDownGraphic)" />
                    

                        <!-- As above, but they are not currently used in out styles -->
                    <sbc:SBAttribute Name="border_color"
                                     GetProperty="(sbc:SBGUIAttribute.SBBorderColor)"
                                     GetConverter="{StaticResource SBColorConverter}"
                                     SetProperty="(sbc:SBGUIAttribute.SBBorderColor)"
                                     />
                    <sbc:SBAttribute Name="border_style"
                                     GetProperty="(sbc:SBGUIAttribute.SBBorderStyle)"
                                     SetProperty="(sbc:SBGUIAttribute.SBBorderStyle)" />
                    <sbc:SBAttribute Name="border_width"
                                     GetProperty="(sbc:SBGUIAttribute.SBBorderWidth)"
                                     SetProperty="(sbc:SBGUIAttribute.SBBorderWidth)" />

                    <sbc:SBAttribute Name="string"
                                     GetProperty="(sbc:SBGUIAttribute.SBString)"
                                     SetProperty="(sbc:SBGUIAttribute.SBString)"/>
                    
                    <sbc:SBAttribute Name ="help_string"                                     
                                     GetProperty="(sbc:SBGUIAttribute.SBHelpString)"
                                     SetProperty="(sbc:SBGUIAttribute.SBHelpString)"/>

                    <!-- Added for eCase 12661*USA (kp June 15, 2010) -->
                    <sbc:SBAttribute Name ="editable"                                     
                                     GetProperty="(sbc:SBGUIAttribute.SBEditable)" 
                                     SetProperty="(sbc:SBGUIAttribute.SBEditable)"/>

                    <!-- Obsolete properties -->
                    <sbc:SBAttribute Name="input_flag" Supported="Obsolete" />

                </sbc:SBAttributeMap>
            </Setter.Value>
        </Setter>

        <Setter Property="Control.Background">
            <Setter.Value>
                <PriorityBinding FallbackValue="{x:Static SystemColors.ControlBrush}">
                    <Binding Path="(sbc:SBGUIAttribute.SBBackground)" Mode="TwoWay" Converter="{StaticResource SBColorConverter}" RelativeSource="{RelativeSource Mode=Self}"/>
                    <Binding Path="GuiObjectDefinition.Background" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBColorConverter}"/>
                    <Binding Path="(sbc:SBControl.SBControlBackground)" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}"/>
                </PriorityBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="Control.Foreground">
            <Setter.Value>
                <PriorityBinding >
                    <Binding Path="(sbc:SBGUIAttribute.SBForeground)" Mode="TwoWay" Converter="{StaticResource SBColorConverter}" RelativeSource="{RelativeSource Mode=Self}"/>
                    <Binding Path="GuiObjectDefinition.Foreground" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBColorConverter}"/>
                </PriorityBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="sbc:SBControl.TextAlignment">
            <Setter.Value>
                <PriorityBinding FallbackValue="Left"  >
                    <Binding Path="(sbc:SBGUIAttribute.SBJustification)" Mode="TwoWay" Converter="{StaticResource SBTextAlignmentConverter}" RelativeSource="{RelativeSource Mode=Self}"/>
                    <Binding Path="GuiObjectDefinition.Justification" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBTextAlignmentConverter}"/>
                </PriorityBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="Control.HorizontalContentAlignment">
            <Setter.Value>
                <PriorityBinding FallbackValue="Left"  >
                    <Binding Path="(sbc:SBGUIAttribute.SBJustification)" Mode="TwoWay" Converter="{StaticResource SBTextAlignmentConverter}" RelativeSource="{RelativeSource Mode=Self}"/>
                    <Binding Path="GuiObjectDefinition.Justification" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBTextAlignmentConverter}"/>
                </PriorityBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="Control.VerticalContentAlignment">
            <Setter.Value>
                <PriorityBinding FallbackValue="Center"  >
                    <Binding Path="(sbc:SBGUIAttribute.SBJustification)" Mode="TwoWay" Converter="{StaticResource SBTextAlignmentConverter}" RelativeSource="{RelativeSource Mode=Self}"/>
                    <Binding Path="GuiObjectDefinition.Justification" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBTextAlignmentConverter}"/>
                </PriorityBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="Control.FontFamily">
            <Setter.Value>
                <PriorityBinding>
                    <Binding Path="(sbc:SBGUIAttribute.SBFont)" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBFontConverter}" ConverterParameter="Family" />
                    <Binding Path="GuiObjectDefinition.Font" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBFontConverter}" ConverterParameter="Family" />
                    <Binding Path="SBPlus.DefaultFontFamily" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBUnsetValueConverter}" />
                </PriorityBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="Control.FontSize">
            <Setter.Value>
                <PriorityBinding>
                    <Binding Path="(sbc:SBGUIAttribute.SBFont)" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBFontConverter}" ConverterParameter="Size" />
                    <Binding Path="GuiObjectDefinition.Font" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBFontConverter}" ConverterParameter="Size" />
                    <Binding Path="SBPlus.DefaultFontSize" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBUnsetValueConverter}" />
                </PriorityBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="Control.FontWeight">
            <Setter.Value>
                <PriorityBinding>
                    <Binding Path="(sbc:SBGUIAttribute.SBFont)" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBFontConverter}" ConverterParameter="Weight" />
                    <Binding Path="GuiObjectDefinition.Font" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBFontConverter}" ConverterParameter="Weight" />
                    <Binding Path="SBPlus.DefaultFontWeight" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBUnsetValueConverter}" />
                </PriorityBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="Control.FontStyle">
            <Setter.Value>
                <PriorityBinding>
                    <Binding Path="(sbc:SBGUIAttribute.SBFont)" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBFontConverter}" ConverterParameter="Style" />
                    <Binding Path="GuiObjectDefinition.Font" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBFontConverter}" ConverterParameter="Style" />
                </PriorityBinding>
            </Setter.Value>
        </Setter>
        
        <Setter Property="sbc:SBControl.TextDecorations">
            <Setter.Value>
                <PriorityBinding>
                    <Binding Path="(sbc:SBGUIAttribute.SBFont)" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBFontConverter}" ConverterParameter="Decorations" />
                    <Binding Path="GuiObjectDefinition.Font" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBFontConverter}" ConverterParameter="Decorations" />
                </PriorityBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="sbc:SBControl.IsEnabled">
            <Setter.Value>
                <PriorityBinding FallbackValue="True">
                    <Binding Path="(sbc:SBGUIAttribute.SBEmphasized)" Mode="TwoWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBConverter}"/>
                    <Binding Path="GuiObjectDefinition.IsEmphasized" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" />
                </PriorityBinding>
            </Setter.Value>
        </Setter>

        <!-- IsEditable -->
        <!-- Created fallback so that both the value in the GUI object definition and the attribute are respected. (SBXA-3877, kp 1/27/11) -->
        <Setter Property="sbc:SBControl.IsEditable">
            <Setter.Value>
                <PriorityBinding FallbackValue="True"  >
                    <Binding Path="(sbc:SBGUIAttribute.SBEditable)" Mode="TwoWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBConverter}"/>
                    <Binding Path="GuiObjectDefinition.Editable" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" />
                </PriorityBinding>
            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <!-- If we are using character coloumn and row positioning, I need to set the margin to 0, so as to allow the grid row and column to position the field -->
            <DataTrigger Binding="{Binding Path=(sbc:SBControl.UsePixelPositioning), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sbp:ISBForm}}, Mode=OneWay }" Value="false">
                <Setter Property="Control.Margin"       Value="0" />
                <Setter Property="Control.Width"        Value="NaN"/>
                <Setter Property="Control.Height"       Value="NaN"/>
                <Setter Property="Control.HorizontalAlignment"  Value="Stretch" />
                <Setter Property="Control.VerticalAlignment"  Value="Stretch" />
            </DataTrigger>
            <!-- Use the margin from the GuiObjectDefinition to position the control. -->
            <DataTrigger Binding="{Binding Path=(sbc:SBControl.UsePixelPositioning), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type sbp:ISBForm}}, Mode=OneWay }" Value="true">
                <Setter Property="Control.Margin">
                    <Setter.Value>
                        <PriorityBinding>
                            <Binding Path="(sbc:SBGUIAttribute.SBCoordinates)"
                                     RelativeSource="{RelativeSource Mode=Self}" Mode="OneWay"
                                     Converter="{StaticResource SBCoordinatesToMarginConverter}" />
                            <Binding Path="GuiObjectDefinition.Margin"
                                     RelativeSource="{RelativeSource Mode=Self}"
                                     Mode="OneWay" />
                        </PriorityBinding>
                    </Setter.Value>
                </Setter>
                <!-- Why does the Binding to GuiObjectDefinition.Width cause a local value in width? The answer - it does not. Snoop is reporting a local value incorrectly. SBXA-3566 -->
                <Setter Property="Control.Width">
                    <Setter.Value>
                        <PriorityBinding>
                            <Binding Path="(sbc:SBGUIAttribute.SBDimensions)" Mode="OneWay" 
                             RelativeSource="{RelativeSource Mode=Self}"
                             Converter="{StaticResource SBDimensionsConverter}"
                             ConverterParameter="width" />
                            <Binding Path="GuiObjectDefinition.Width" Mode="OneWay" 
                             RelativeSource="{RelativeSource Mode=Self}" />
                        </PriorityBinding>
                    </Setter.Value>
                </Setter>

                <Setter Property="Control.Height">
                    <Setter.Value>
                        <PriorityBinding>
                            <Binding Path="(sbc:SBGUIAttribute.SBDimensions)" Mode="OneWay" 
                             RelativeSource="{RelativeSource Mode=Self}"
                             Converter="{StaticResource SBDimensionsConverter}"
                             ConverterParameter="height" />
                            <Binding Path="GuiObjectDefinition.Height" Mode="OneWay" 
                             RelativeSource="{RelativeSource Mode=Self}" />
                        </PriorityBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <!-- This trigger will check to see if the server is Dormant and if we should show the hour glass, if both are true then the cursor is change to the Wait cursor. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <!--<Condition Binding="{Binding Path=ApplicationDefinition.IsHourGlassEnabled, Source={x:Static sbc:SBPlus.Current}}" Value="true" />-->
                    <Condition Binding="{Binding Path=SBPlus.ApplicationDefinition.IsHourGlassEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="true" />
                    <Condition Binding="{Binding Path=SBPlus.InputState, RelativeSource={RelativeSource Mode=Self}}" Value="Dormant" />
                </MultiDataTrigger.Conditions>
                <Setter Property="FrameworkElement.Cursor" Value="Wait" />
            </MultiDataTrigger>
            
            <!-- Previously I used the following expression in the conditions, however this does not work in Blend 3 and appears to be a bug, as per --> 
            <!-- http://social.expression.microsoft.com/Forums/en/blend/thread/fe155fe7-a6f8-430a-8837-d28a748b8f03                                  -->
            <!--                                                                                                                                     -->
            <!-- <Condition Binding="{Binding Path=ApplicationDefinition.IsHourGlassEnabled, Source={x:Static sbc:SBPlus.Current}}" Value="true" />  -->
            <!-- <Condition Binding="{Binding Path=InputState, Source={x:Static sbc:SBPlus.Current}}" Value="Dormant" />                             -->
            <!--                                                                                                                                     -->
            <!-- This trigger will check to see if the client is busy and if we should show the hour glass, if both are true then the cursor is change to the Wait cursor. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=SBPlus.ApplicationDefinition.IsHourGlassEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="true" />
                    <Condition Binding="{Binding Path=SBPlus.InputState, RelativeSource={RelativeSource Mode=Self}}" Value="Busy" />
                </MultiDataTrigger.Conditions>
                <Setter Property="FrameworkElement.Cursor" Value="Wait" />
            </MultiDataTrigger>

            <!-- check to see if the field has first level help, ie. a HelpString in GuiObjectDefinition, if it does set the tooltip. -->
            <!--DataTrigger Binding="{Binding Path=GuiObjectDefinition.HelpString, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay, Converter={StaticResource SBIsNullOrEmptyConverter}}" Value="false">
                <Setter Property="FrameworkElement.ToolTip" Value="{Binding Path=GuiObjectDefinition.HelpString, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
            </DataTrigger-->
            
            <DataTrigger Binding="{Binding Path=(sbc:SBGUIAttribute.SBHelpString), RelativeSource={RelativeSource Mode=Self}, Mode=OneWay, Converter={StaticResource SBIsNullOrEmptyConverter}}" Value="false">
                <Setter Property="FrameworkElement.ToolTip" Value="{Binding Path=(sbc:SBGUIAttribute.SBHelpString), RelativeSource={RelativeSource Mode=Self}, Mode=OneWay, Converter={StaticResource SBConverter}}" />
            </DataTrigger>

            <!-- Make sure I only set the Style if there is one in the GuiObjectDefinition to set, otherwise we get all sorts of un-required sets and we lose the fallback priorities eCase 41516*USA -->
            <DataTrigger Binding="{Binding Path=GuiObjectDefinition.StyleName, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay, Converter={StaticResource SBIsNullOrEmptyConverter}}" Value="false">
                <Setter Property="sbc:SBGUIAttribute.SBStyleName" Value="{Binding Path=GuiObjectDefinition.StyleName, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
            </DataTrigger>


            <DataTrigger Binding="{Binding Path=Collapsed, RelativeSource={RelativeSource Mode=Self}}" Value="False">
                <Setter Property="sbc:SBControl.Visibility" Value="{Binding Path=(sbc:SBGUIAttribute.SBDrawable), RelativeSource={RelativeSource Mode=Self}, Mode=TwoWay, Converter={StaticResource SBDrawableConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=Collapsed, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="sbc:SBGUIAttribute.SBDrawable" Value="0" />
                <Setter Property="sbc:SBControl.Visibility" Value="Collapsed"/>                
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=GuiObjectDefinition.IsOutsideForm, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" Value="True">
                <Setter Property="Control.Visibility" Value="Collapsed"/>
            </DataTrigger>
            
        </Style.Triggers>

    </Style>

</ResourceDictionary>